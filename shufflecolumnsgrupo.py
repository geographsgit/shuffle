# -*- coding: utf-8 -*-
"""ShuffleColumnsGrupo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tTe1cl-mtpJb9TjS_srKYX9v2cLi5Wmw

## Importing libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Reading files"""

data = pd.read_excel('cases_matrix.xls', index_col=0, skiprows=[0], header=0) 
data = data.iloc[2:-1,2:-1] #Removing first and second columns and rows and Total column

# #data = data.drop(data.columns[-1], axis=1) #removing column Total
data.fillna(0, inplace=True)
data = data.reset_index(drop=True)
data = data.astype(float)
data

"""#Renaming columns as codezones"""

column_names = []
for i in range(55):
  column_names.append('Z'+str(i+1))

data.columns = column_names
data.columns

data.shape

"""#Statistics"""

data.describe()

"""##Calculating Original Pearson Correlation"""

dt = data.astype(float)
dt

corr = dt.corr(method='pearson')
corr

export_csv = corr.to_csv('correlations_original.csv', index = True, header=True)
listas = corr.values.tolist()
listas

# import sklearn

# dt_shuffled = sklearn.utils.shuffle(dt)
# dt_shuffled
# corr_shuffled = dt_shuffled.corr(method='pearson')

# export_csv = corr_shuffled.to_csv('correlations_shuffled.csv', index = True, header=True)
# corr_shuffled.columns
# listas = corr_shuffled.values.tolist()
# lista0 = listas[0]

"""#Delayed Correlation"""

def calcCorrBetweenTwoColumns(data, column1, column2):
  count_columns = data.shape[1]
  A = data.iloc[:,column1]

  listOfCorrs=[]
  B = data.iloc[:,column2]
  count_begin=0
  count_row = data.shape[0]
  
  corrs = []
  
  AA = A.iloc[count_begin:] 
  BB = B.iloc[:count_row] 
  AA = AA.reset_index(drop=True)
  BB = BB.reset_index(drop=True)
  
  merged = pd.merge_asof(AA, BB, left_index=True, right_index=True, direction='nearest')

  pearsoncorr = merged.corr(method='pearson')
  corrs.append(pearsoncorr.iloc[0,1])
  
  listOfCorrs.append(corrs)
  return listOfCorrs

from datetime import datetime
print(datetime.now(tz=None))

maxs = []
mins = []
means = []
dt_original = dt

num_shuffles = 100 #Number of desired shuffles

correlations =  pd.DataFrame(columns=['X1','X2','corr'])
for x in range(dt.shape[1]):
  for i in range(x+1, dt.shape[1]):
    correlations = correlations.append({
    "X1": (x+1),
    "X2":  (i+1),
        "corr": calcCorrBetweenTwoColumns(dt, x, i)[0][0]
      }, ignore_index=True)


print('Highest correlation without delay: \n' + str(correlations.iloc[correlations['corr'].idxmax()]))
correlations['corr'].hist(bins=24)

plt.title('Correlations')
maxs.append(correlations['corr'].max())
mins.append(correlations['corr'].min())
means.append(correlations['corr'].mean())

for m in range(num_shuffles):
  dt = dt_original
  #Shuffling each column
  for k in range(dt.shape[1]):
    zone = dt.columns[k]
    new_column = sklearn.utils.shuffle(dt[zone])
    dt[zone] = new_column.values
  correlations =  pd.DataFrame(columns=['X1','X2','corr'])

  for x in range(dt.shape[1]):
    for i in range(x+1, dt.shape[1]):
      correlations = correlations.append({
      "X1": (x+1),
      "X2":  (i+1),
          "corr": calcCorrBetweenTwoColumns(dt, x, i)[0][0]
        }, ignore_index=True)
  
  correlations['corr'].hist(bins=24, alpha=0.5)
  maxs.append(correlations['corr'].max())
  mins.append(correlations['corr'].min())
  means.append(correlations['corr'].mean())

df = pd.DataFrame(maxs) 
df.hist(bins=24)
plt.title('Maxs')
df = pd.DataFrame(mins) 
df.hist(bins=24)
plt.title('Mins')
df = pd.DataFrame(means) 
df.hist(bins=24)
plt.title('Means')

print(datetime.now(tz=None))

